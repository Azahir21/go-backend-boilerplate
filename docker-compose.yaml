version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: go-backend-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-go_boilerplate}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go-backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-go_boilerplate}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-backend-app
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-go_boilerplate}
      - DB_SSL_MODE=${DB_SSL_MODE:-disable}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-this-in-production}
      - JWT_EXPIRY_HOURS=${JWT_EXPIRY_HOURS:-72}
      - SERVER_PORT=8080
      - SERVER_ENV=${SERVER_ENV:-production}
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME:-admin}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@example.com}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-admin123}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-backend-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  go-backend-network:
    driver: bridge
